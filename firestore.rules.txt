rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper to read the caller's role from /users/{uid}.role
    function userRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Users collection
    match /users/{uid} {
      allow read: if request.auth != null && (uid == request.auth.uid || userRole() == 'manager');
      // Users can update only their own profile fields except role.
      allow update: if request.auth != null && uid == request.auth.uid
                    && (request.resource.data.keys().hasOnly(['displayName','email','createdAt','role']) == false
                        || request.resource.data.role == resource.data.role);
      // Only managers can set role â€” creation happens on first login in the app.
      allow create: if request.auth != null && uid == request.auth.uid;
      allow delete: if false;
    }

    // Leave requests: employees can create/read their own; managers can read all and update status
    match /leaveRequests/{docId} {
      allow create: if request.auth != null
                    && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null
                  && (resource.data.userId == request.auth.uid || userRole() == 'manager');
      // Employees may update their own request only while pending; managers can update anytime
      allow update: if request.auth != null && (
                      (resource.data.userId == request.auth.uid && resource.data.status == 'pending')
                      || userRole() == 'manager'
                    );
      allow delete: if userRole() == 'manager';
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
